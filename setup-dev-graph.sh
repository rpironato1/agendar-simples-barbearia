#!/bin/bash

# 🏗️ Elite Barber SaaS - Setup Baseado em Teoria dos Grafos
# ==========================================================
# Este script configura o ambiente de desenvolvimento seguindo
# a ordem de dependências baseada em DAG (Directed Acyclic Graph)

set -e  # Exit on any error

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Função para logging estruturado
log_level() {
    local level=$1
    local module=$2
    local message=$3
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        0) color=$RED ;;
        1) color=$CYAN ;;
        2) color=$BLUE ;;
        3) color=$PURPLE ;;
        4) color=$YELLOW ;;
        5) color=$GREEN ;;
        *) color=$NC ;;
    esac
    
    echo -e "${color}[L${level}:${module}] ${timestamp} - ${message}${NC}"
}

echo -e "${CYAN}"
echo "🏗️ Elite Barber SaaS - Setup Baseado em Teoria dos Grafos"
echo "=============================================================="
echo -e "${NC}"

# =============================================================================
# NÍVEL 0: External Dependencies (Base do Grafo)
# =============================================================================
log_level 0 "EXTERNAL" "Verificando dependências externas..."

# Verificar Node.js
if ! command -v node &> /dev/null; then
    log_level 0 "EXTERNAL" "❌ Node.js não encontrado. Instale Node.js 18+"
    echo "Visite: https://nodejs.org/"
    exit 1
fi

NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    log_level 0 "EXTERNAL" "❌ Node.js versão muito antiga ($NODE_VERSION). Requer Node.js 18+"
    exit 1
fi

log_level 0 "EXTERNAL" "✅ Node.js $(node --version) encontrado"

# Verificar npm
if ! command -v npm &> /dev/null; then
    log_level 0 "EXTERNAL" "❌ npm não encontrado"
    exit 1
fi

log_level 0 "EXTERNAL" "✅ npm $(npm --version) encontrado"

# =============================================================================
# NÍVEL 1: Dependências Base (Core + Integrations)
# =============================================================================
log_level 1 "DEPENDENCIES" "Instalando dependências do grafo..."

# Instalar dependências Node
if [ ! -d "node_modules" ]; then
    log_level 1 "DEPENDENCIES" "📦 Instalando dependências npm..."
    npm install --silent
else
    log_level 1 "DEPENDENCIES" "📦 Dependências já instaladas, verificando..."
    npm ci --silent
fi

log_level 1 "DEPENDENCIES" "✅ Dependências instaladas"

# Instalar ferramentas de análise de grafo
log_level 1 "DEPENDENCIES" "🔍 Instalando ferramentas de análise..."
npm install --save-dev madge 2>/dev/null || true

# =============================================================================
# NÍVEL 2: Configuração de Ambiente (Lib + Utils)
# =============================================================================
log_level 2 "ENVIRONMENT" "Configurando ambiente de desenvolvimento..."

# Configurar .env.local
if [ ! -f ".env.local" ]; then
    log_level 2 "ENVIRONMENT" "📝 Criando .env.local..."
    
    cat > .env.local << EOF
# Elite Barber SaaS - Development Configuration
# Generated by setup-dev-graph.sh

# Development Server Configuration
VITE_PORT=8050
VITE_HOST=localhost

# Supabase Configuration (Update with your credentials)
VITE_SUPABASE_URL=https://dikfrwaqwbtibasxdvie.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRpa2Zyd2Fxd2J0aWJhc3hkdmllIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4MDI0MDksImV4cCI6MjA2NjM3ODQwOX0.iOOjd_rXKeDhYAMJuuRDQRP47rhthxLG_OlkCSaXmSA

# MCP Server Configuration
MCP_PORT=8051
MCP_HOST=localhost

# Debug Configuration
DEBUG=true
VITE_DEBUG=true
EOF
    
    log_level 2 "ENVIRONMENT" "✅ .env.local criado"
else
    log_level 2 "ENVIRONMENT" "✅ .env.local já existe"
fi

# Verificar estrutura de diretórios (grafo de módulos)
log_level 2 "ENVIRONMENT" "🏗️ Verificando estrutura modular..."

REQUIRED_DIRS=("src/core" "src/integrations" "src/lib" "src/hooks" "src/components" "src/pages" "src/mcp")
for dir in "${REQUIRED_DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        log_level 2 "ENVIRONMENT" "❌ Diretório obrigatório não encontrado: $dir"
        exit 1
    fi
done

log_level 2 "ENVIRONMENT" "✅ Estrutura modular verificada"

# =============================================================================
# NÍVEL 3: Verificação de Integridade (Hooks + MCP)
# =============================================================================
log_level 3 "INTEGRITY" "Verificando integridade da arquitetura..."

# Verificar dependências circulares
if command -v npx &> /dev/null && [ -f "node_modules/.bin/madge" ]; then
    log_level 3 "INTEGRITY" "🔄 Verificando dependências circulares..."
    
    if npx madge --circular src/ --extensions ts,tsx; then
        log_level 3 "INTEGRITY" "✅ Nenhuma dependência circular encontrada"
    else
        log_level 3 "INTEGRITY" "❌ Dependências circulares detectadas!"
        log_level 3 "INTEGRITY" "Execute: npx madge --circular src/ para detalhes"
        exit 1
    fi
    
    # Gerar grafo visual
    log_level 3 "INTEGRITY" "📊 Gerando grafo de dependências..."
    npx madge --image dependency-graph.svg src/ --extensions ts,tsx 2>/dev/null || true
    if [ -f "dependency-graph.svg" ]; then
        log_level 3 "INTEGRITY" "✅ Grafo salvo em: dependency-graph.svg"
    fi
fi

# Verificar arquivos TypeScript críticos
CRITICAL_FILES=("src/core/index.ts" "src/lib/supabase.ts" "src/hooks/useAuth.tsx" "src/App.tsx")
for file in "${CRITICAL_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        log_level 3 "INTEGRITY" "❌ Arquivo crítico não encontrado: $file"
        exit 1
    fi
done

log_level 3 "INTEGRITY" "✅ Arquivos críticos verificados"

# =============================================================================
# NÍVEL 4: Configuração de Ports (Components + API)
# =============================================================================
log_level 4 "PORTS" "Configurando portas na faixa 8050-8060..."

# Verificar se as portas estão disponíveis
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 1  # Porta ocupada
    else
        return 0  # Porta livre
    fi
}

# Verificar porta 8050 (Frontend)
if check_port 8050; then
    log_level 4 "PORTS" "✅ Porta 8050 (Frontend) disponível"
else
    log_level 4 "PORTS" "⚠️ Porta 8050 ocupada, será liberada durante o startup"
fi

# Verificar porta 8051 (MCP Server)
if check_port 8051; then
    log_level 4 "PORTS" "✅ Porta 8051 (MCP Server) disponível"
else
    log_level 4 "PORTS" "⚠️ Porta 8051 ocupada, será liberada durante o startup"
fi

# =============================================================================
# NÍVEL 5: Testes de Conectividade (Pages)
# =============================================================================
log_level 5 "CONNECTIVITY" "Testando conectividade externa..."

# Testar conectividade com Supabase
if ping -c 1 dikfrwaqwbtibasxdvie.supabase.co >/dev/null 2>&1; then
    log_level 5 "CONNECTIVITY" "✅ Supabase acessível"
else
    log_level 5 "CONNECTIVITY" "⚠️ Supabase não acessível (verifique conexão de internet)"
fi

# =============================================================================
# NÍVEL 6: Scripts de Desenvolvimento (App)
# =============================================================================
log_level 6 "SCRIPTS" "Configurando scripts de desenvolvimento..."

# Verificar se package.json tem os scripts necessários
if ! grep -q '"dev".*"vite' package.json; then
    log_level 6 "SCRIPTS" "❌ Script 'dev' não encontrado no package.json"
    exit 1
fi

log_level 6 "SCRIPTS" "✅ Scripts de desenvolvimento verificados"

# Criar script de início rápido
cat > start-dev.sh << 'EOF'
#!/bin/bash
# Script de início rápido baseado no grafo de dependências

echo "🚀 Iniciando Elite Barber SaaS..."

# Verificar se o setup foi executado
if [ ! -f ".env.local" ]; then
    echo "❌ Execute primeiro: ./setup-dev-graph.sh"
    exit 1
fi

# Iniciar desenvolvimento na ordem correta do grafo
echo "📱 Iniciando Frontend (Nível 5) na porta 8050..."
npm run dev

EOF

chmod +x start-dev.sh

# Criar script para MCP Server
cat > start-mcp.sh << 'EOF'
#!/bin/bash
# Script para iniciar MCP Server (Nível 3)

echo "🤖 Iniciando MCP Server na porta 8051..."

if [ ! -f "src/mcp/server.ts" ]; then
    echo "❌ MCP Server não encontrado"
    exit 1
fi

node src/mcp/server.ts --port 8051

EOF

chmod +x start-mcp.sh

log_level 6 "SCRIPTS" "✅ Scripts de início criados: start-dev.sh, start-mcp.sh"

# =============================================================================
# FINALIZAÇÃO
# =============================================================================
echo ""
echo -e "${GREEN}✅ Setup Completo! Grafo de Dependências Configurado${NC}"
echo -e "${GREEN}====================================================${NC}"
echo ""
echo -e "${YELLOW}📋 Próximos Passos:${NC}"
echo ""
echo -e "${CYAN}1. Desenvolvimento Frontend (Nível 5):${NC}"
echo "   ./start-dev.sh"
echo "   ou: npm run dev"
echo ""
echo -e "${CYAN}2. MCP Server Completo (Nível 3):${NC}"
echo "   ./start-mcp.sh"
echo "   ou: node src/mcp/server.ts"
echo ""
echo -e "${CYAN}3. Testes E2E (Nível 6):${NC}"
echo "   npm run test:e2e"
echo ""
echo -e "${CYAN}4. Análise do Grafo:${NC}"
echo "   npx madge --graph graph.svg src/"
echo ""
echo -e "${PURPLE}🌐 URLs de Acesso:${NC}"
echo "   Frontend: http://localhost:8050"
echo "   MCP Server: http://localhost:8051"
echo "   API: http://localhost:8050/api/*"
echo ""
echo -e "${BLUE}📊 Arquivos Gerados:${NC}"
echo "   - .env.local (configuração)"
echo "   - start-dev.sh (início rápido)"
echo "   - start-mcp.sh (MCP Server)"
echo "   - dependency-graph.svg (grafo visual)"
echo ""
echo -e "${GREEN}🎯 Sistema pronto para desenvolvimento!${NC}"